//
// Created by leonardoarcari on 22/06/17.
//

#ifndef ASPECT_PROJECT_REGIONMONITOR_H
#define ASPECT_PROJECT_REGIONMONITOR_H

#include "MonitorGenerator.h"
#include "TunerElements.h"

namespace ag {
/**
 * A RegionMonitor is a MonitorGenerator to monitor the execution of a region
 * of interest in the user functional code. RegionMonitor is the class
 * representing the XML element <region-monitor>. Being a generator it exposes
 * methods to:
 *  - generate code for AspectC++ pointcuts.
 *  - generate code for AspectC++ advices.
 *  - generate C++ headers for the functions to mark a region of interest.
 * RegionMonitor, in order to monitor a region of interest requires the user to
 * mark it with a call to the following functions:
 *  - margot_<blockName>_start_roi(<listOfSoftwareKnobs>)
 *  - margot_<blockName>_end_roi()
 * These functions are generated by MarGotAspect.<br>
 * RegionMonitor generates AspectC++ code to perform the following before
 * margot_<blockName>_start_roi() call:
 *  - Check if software knobs have to be updated.
 *  - Run an optional environment setup function to react to software knob
 *    changes.
 *  - Start the monitor.
 * and to perform the following after margot_<blockName>_end_roi() call:
 *  - Stop the monitor.
 *  - Log the results.
 */
class RegionMonitor : public MonitorGenerator {
public:
  /**
   * RegionMonitor constructor.
   * @param [in] knobs a std::vector of Arguments that are software knobs in
   *             this \p blockName.
   * @param [in] configureCall a C++ line of code to call to react to software
   *             knob changes.
   * @param [in] blockName the name of the mARGOt block.
   */
  RegionMonitor(std::vector<Argument> knobs,
                const std::string &configureCall, const std::string &blockName);

  /**
   * RegionMonitor constructor.
   * @param [in] knobs a std::vector of Arguments that are software knobs in
   *             this \p blockName. Here no configure-call is defined so no
   * function will be called to react to software knob changes.
   * @param [in] blockName the name of the mARGOt block.
   */
  RegionMonitor(std::vector<Argument> knobs,
                const std::string &blockName);

  /**
   * @see MonitorGenerator::generateAdvices
   * Generates AspectC++ code for advices according to what is stated above
   * in class documentation.
   * @param [in] indent a std::string for the indent factor to prepend to each
   *             generated code line.
   * @return a vector of strings each of which containing the AspectC++ code
   *         for an _advice_
   */
  std::vector<std::string> generateAdvices(std::string indent) override;

  /**
   * @see MonitorGenerator::generatePointcuts
   * Generates AspectC++ code for pointcuts to match a call to the function
   * to monitor with a list of Argument as parameters
   * @param [in] indent a std::string for the indent factor to prepend to each
   *             generated code line.
   * @return a vector of strings each of which containing the AspectC++ code
   *         to define a _pointcut_.
   */
  std::vector<std::string> generatePointcuts(std::string indent) override;

  /**
   * Generates the C++ headers for the functions to mark region of interest in
   * the user function code. More in detail generates definition for the
   * following functions:
   * - margot_<blockName>_start_roi(<listOfSoftwareKnobs>)
   * - margot_<blockName>_end_roi()
   * @param [in] indent a std::string for the indent factor to prepend to each
   *             generated code line.
   * @return a std::string of C++ function definition.
   */
  std::string generateHeaders(std::string indent);

private:
  std::vector<Argument> _knobs;
  std::string _configureCall;
  std::string _blockName;
};
} // namespace ag

#endif // ASPECT_PROJECT_REGIONMONITOR_H
