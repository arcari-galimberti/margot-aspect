//
// Created by leonardoarcari on 01/06/17.
//

#ifndef ASPECT_PROJECT_ASPECTGENERATOR_H
#define ASPECT_PROJECT_ASPECTGENERATOR_H

#include "AspectParser.h"
#include <string>

namespace ag {
class AspectGenerator {
public:
  AspectGenerator(const std::string &xmlPath,
                  const std::string &outputPath);
  AspectGenerator(const AspectGenerator &oag);

  void outputPathname(const std::string &outputPath);
  const std::string &generateAspect();
  void writeOnOutput();

private:
  std::string _xmlPathname;
  std::string _outputPathname;
  AspectParser _parser;
  std::string _generatedAspect;

  static constexpr char ind[] = "  ";
  static constexpr char generatedIntro[] =
      "/**\n"
      " * This file is machine generated by Margot Aspect.\n"
      " * You are not supposed to manually edit the following code the risk\n"
      " * is to make it not working with the Margot Aspect build system.\n"
      " * For any further details please reach us at <github link>\n"
      " */";
  static constexpr char mainPointcut[] =
      "pointcut main_exec() = execution(\"int main(...)\");";
  static constexpr char mainAdvice[] =
      "advice main_exec(): before(){\n"
		  "\tmargot::init();\n"
	    "}\n\n";
};

void generateAspect(const std::string &xmlPathname, const std::string& outputPathname);
}

#endif // ASPECT_PROJECT_ASPECTGENERATOR_H
