//
// Created by leonardoarcari on 13/06/17.
//

#ifndef ASPECT_PROJECT_STATETUNER_H
#define ASPECT_PROJECT_STATETUNER_H

#include "TunerElements.h"
#include <vector>

namespace ag {

/**
 * StateTuner is the top-level class for generating AspectC++ code that sets
 * a mARGOt state according to some predicates on a control variable. StateTuner
 * is the class representing the <state-tuner> element in XML. Being a
 * generator, it exposes methods to:
 *  - generate code for AspectC++ pointcuts
 *  - generate code for AspectC++ advices
 *  - generate C++ code that advices invoke.
 *  <br>
 *  StateTuner is move-constructable.
 */
class StateTuner {
public:
  /**
   * StateTuner constructor.
   * @param [in] controlVar the ControlVar to predicate on.
   * @param [in] rules a std::vector of Rule defining the predicates on
   *             \p controlVar
   * @param [in] blockName the mARGOt block name which \p goalName is defined
   *             in.
   */
  StateTuner(const ControlVar &controlVar, const std::vector<Rule> &&rules,
             const std::string &blockName);
  /**
   * StateTuner move constructor.
   * @param [in] other the StateTuner object to move into this.
   */
  StateTuner(StateTuner &&other);

  /**
   * Generates AspectC++ advices. The advices is executed after the
   * assignment of the control variable (through operator=()). It performs a
   * call to a function generated by StateTuner::generateHeaders that sets
   * the mARGOt state according to predicates on the new control var value.
   * @param [in] indent a std::string for the indent factor to prepend to each
   *             generated code line.
   * @return a std::vector of AspectC++ advices code.
   */
  std::vector<std::string> generateAdvices(std::string indent);

  /**
   * Generates AspectC++ pointcuts. The pointcuts match the assignment of the
   * control variable through the assignment operator (operator=()).
   * @param [in] indent a std::string for the indent factor to prepend to each
   *             generated code line.
   * @return a std::vector of AspectC++ pointcuts code.
   */
  std::vector<std::string> generatePointcuts(std::string indent);

  /**
   * Generates C++ function definition to set the mARGOt state according to
   * predicates on the control variable value. It's a if-then-else block testing
   * all the conditions described in _rules_ vector passed in the constructor.
   * @param [in] indent a std::string for the indent factor to prepend to each
   *             generated code line.
   * @return a std::string of C++ function definition.
   */
  std::string generateHeaders(std::string indent);

  /**
   * Block name getter.
   * @return the block name.
   */
  const std::string &blockName() const;

private:
  ControlVar _controlVar;
  std::vector<Rule> _rules;
  std::string _blockName;
};
}

#endif // ASPECT_PROJECT_STATETUNER_H
