#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{color}

% Define language settings
\definecolor{gray}{rgb}{0.4,0.4,0.4}
\definecolor{darkblue}{rgb}{0.0,0.0,0.6}
\definecolor{cyan}{rgb}{0.0,0.6,0.6}
\definecolor{maroon}{rgb}{0.5,0,0}
\definecolor{darkgreen}{rgb}{0,0.5,0}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\headheight 1cm
\headsep 1cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
MarGotAspect - XML Configuration File User Manual
\end_layout

\begin_layout Author
Arcari Leonardo, Galimberti Andrea
\end_layout

\begin_layout Section
About
\end_layout

\begin_layout Standard
This document is intended to be used as a reference for the elements of
 the XML configuration file.
 It describes the use and meaning of each element providing examples.
 MarGotAspect is intended as a code generator for the mARGOt autotuning
 framework, therefore it uses concepts and constructs for which to refer
 to the mARGOt framework documentation.
\end_layout

\begin_layout Section
Document Type Definition
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=XML,basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2,columns=fullflexible,frame=single"
inline false
status open

\begin_layout Plain Layout

<!ELEMENT margot (aspect*)>
\end_layout

\begin_layout Plain Layout

<!ELEMENT aspect (function-monitor*, region-monitor*, goal-tuner*, state-tuner*)
>
\end_layout

\begin_layout Plain Layout

<!ATTLIST aspect block_name CDATA #REQUIRED>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<!ELEMENT function-monitor (function-name, return-type, argument*, configure-cal
l)>
\end_layout

\begin_layout Plain Layout

<!ELEMENT function-name (#PCDATA)>
\end_layout

\begin_layout Plain Layout

<!ELEMENT return-type (#PCDATA)>
\end_layout

\begin_layout Plain Layout

<!ELEMENT argument (type, name)>
\end_layout

\begin_layout Plain Layout

<!ATTLIST argument sw-knob CDATA #REQUIRED>
\end_layout

\begin_layout Plain Layout

<!ELEMENT type (#PCDATA)>
\end_layout

\begin_layout Plain Layout

<!ELEMENT name (#PCDATA)>
\end_layout

\begin_layout Plain Layout

<!ELEMENT configure-call (#PCDATA)>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<!ELEMENT region-monitor (argument+, configure-call)>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<!ELEMENT goal-tuner (control-var, goal-name, rule+)>
\end_layout

\begin_layout Plain Layout

<!ELEMENT control-var (type, name)>
\end_layout

\begin_layout Plain Layout

<!ELEMENT goal-name (#PCDATA)>
\end_layout

\begin_layout Plain Layout

<!ELEMENT rule ((predicate|and|or|not), value)>
\end_layout

\begin_layout Plain Layout

<!ELEMENT predicate (#PCDATA)>
\end_layout

\begin_layout Plain Layout

<!ATTLIST predicate type CDATA #REQUIRED>
\end_layout

\begin_layout Plain Layout

<!ELEMENT and ((predicate|and|or|not), (predicate|and|or|not))>
\end_layout

\begin_layout Plain Layout

<!ELEMENT or ((predicate|and|or|not), (predicate|and|or|not))>
\end_layout

\begin_layout Plain Layout

<!ELEMENT not ((predicate|and|or|not))>
\end_layout

\begin_layout Plain Layout

<!ELEMENT value (#PCDATA)>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<!ELEMENT state-tuner (control-var, rule+)>
\end_layout

\end_inset


\end_layout

\begin_layout Section
Aspect
\end_layout

\begin_layout Standard
The most external element 
\emph on
margot
\emph default
 can contain multiple 
\emph on
aspect
\emph default
 elements, each with a block_name attribute corresponding to a block declared
 in the mARGOt framework configuration files.
\end_layout

\begin_layout Standard
Each 
\emph on
aspect 
\emph default
element can contain any number of function monitors, region monitors, goal
 tuners and state tuners, and will be mapped to a single aspect (with its
 related pointcuts and advices) inside the generated aspect file.
\end_layout

\begin_layout Standard
It has to be noted that, aside from the XML configuration file contents
 and the related aspects that will be generated, a 
\begin_inset Quotes eld
\end_inset

special
\begin_inset Quotes erd
\end_inset

 aspect is always created containing an advice such that a margot::init()
 call is performed at the start of the main function of the application
 program.
\end_layout

\begin_layout Section
Monitors
\end_layout

\begin_layout Standard
Monitors can either be function monitors or region monitors.
\end_layout

\begin_layout Standard
The 
\emph on
argument
\emph default
 elements correspond to variables which can be configured in the mARGOt
 framework as knobs, or be standard parameters passed to the monitored function;
 this is specified with the 
\emph on
sw-knob
\emph default
 attribute of each argument, which can take values 
\begin_inset Quotes eld
\end_inset


\emph on
yes
\emph default

\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset


\emph on
no
\emph default

\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The optional 
\emph on
configure-call
\emph default
 subelement corresponds to a function that has to be called whenever the
 values of the knobs are modified; this function has to be written in the
 XML document as:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

function_name(arg1_type arg1_name, arg2_type, arg2_name, ...)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Function Monitor
\end_layout

\begin_layout Standard
A function monitor is characterized by the name (
\emph on
function-name
\emph default
), the return type (return-type
\emph on
)
\emph default
 and the arguments (
\emph on
argument
\emph default
) of the function that has to be monitored.
\end_layout

\begin_layout Standard
The generated aspect code will then start and stop the monitors for the
 corresponding knob parameters of the function, as configured in the mARGOt
 framework configuration files; logging activity for the monitors is also
 performed.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout Standard
Let's say we want to monitor the execution time of the function 
\emph on
do_work
\emph default
.
 It takes as arguments two parameters, one is a normal parameter, the other
 one is a software knob in the 
\series bold
mARGOt
\series default
 framework.
 This is the functional code the user wrote:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2,columns=fullflexible,frame=single,stringstyle={\color[rgb]{0.627,0.126,0.941}},keywordstyle={\color[rgb]{0,0,1}},identifierstyle={\ttfstyle},commentstyle={\color{gray}\upshape}"
inline false
status open

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

  int trials = 100; // Normal argument
\end_layout

\begin_layout Plain Layout

  int knob = 2;	 // Sofware knob
\end_layout

\begin_layout Plain Layout

  for (int i = 0; i < N; ++i) {
\end_layout

\begin_layout Plain Layout

    do_work(trials, knob);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

} // Functional code
\end_layout

\end_inset


\end_layout

\begin_layout Standard
So we write an XML file describing our intention to monitor a function named
 
\emph on
do_work
\emph default
 taking two parameters, one of which is a 
\emph on
software knob
\emph default
 in the block named 
\emph on
foo
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=XML,basicstyle={\ttfamily},breaklines=true,tabsize=2,basicstyle={\ttfamily},columns=fullflexible,showstringspaces=false,frame=single,morestring={[s]{&quot;}{&quot;}},morecomment={[s]{?}{?}},morecomment={[s]{!--}{--}},commentstyle={\color{darkgreen}},moredelim={[s][\color{black}]{>}{<}},moredelim={[s][\color{red}]{\ }{=}},stringstyle={\color{blue}},identifierstyle={\color{maroon}}"
inline false
status open

\begin_layout Plain Layout

<margot>
\end_layout

\begin_layout Plain Layout

  <aspect block_name="foo">
\end_layout

\begin_layout Plain Layout

    <function-monitor>
\end_layout

\begin_layout Plain Layout

      <function-name>do_work</function-name>
\end_layout

\begin_layout Plain Layout

      <return-type>void</return-type>
\end_layout

\begin_layout Plain Layout

      <argument sw-knob="no">
\end_layout

\begin_layout Plain Layout

        <type>int</type>
\end_layout

\begin_layout Plain Layout

	    <name>trials</name>
\end_layout

\begin_layout Plain Layout

      </argument>
\end_layout

\begin_layout Plain Layout

      <argument sw-knob="yes">
\end_layout

\begin_layout Plain Layout

        <type>int</type>
\end_layout

\begin_layout Plain Layout

	    <name>knob</name>
\end_layout

\begin_layout Plain Layout

      </argument>
\end_layout

\begin_layout Plain Layout

    </function-monitor>
\end_layout

\begin_layout Plain Layout
\noindent

  </aspect>
\end_layout

\begin_layout Plain Layout

</margot>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And here is the AspectC++ code that 
\series bold
MarGotAspect
\series default
 generates for us.
 Note that it performs a check on the value of our software knob and then
 starts the monitor before calling 
\emph on
do_work()
\emph default
.
 Lastly, after 
\emph on
do_work()
\emph default
 returned, it stops the monitor and logs the results.
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2,morekeywords={aspect,pointcut,advice,before,after,execution,args,set},columns=fullflexible,frame=single,keywordstyle={\color[rgb]{0,0,1}},commentstyle={\color{gray}\upshape},identifierstyle={\ttfstyle},stringstyle={\color[rgb]{0.627,0.126,0.941}}"
inline false
status open

\begin_layout Plain Layout

aspect GeneralAspect {
\end_layout

\begin_layout Plain Layout

	pointcut main_exec() = execution("int main(...)");
\end_layout

\begin_layout Plain Layout

	advice main_exec() : before() {
\end_layout

\begin_layout Plain Layout

		margot::init();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

aspect fooAspect {
\end_layout

\begin_layout Plain Layout

	pointcut do_work_exec(int trials, int knob) = execution("void do_work(...)")
 && args(knob);
\end_layout

\begin_layout Plain Layout

	advice do_work_exec(trials, knob) : before(int knob) {
\end_layout

\begin_layout Plain Layout

		if (margot::foo::update(knob)) {
\end_layout

\begin_layout Plain Layout

			margot::foo::manager.configuration_applied();
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		margot::foo::start_monitor();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	advice do_work_exec(knob) : after(int knob) {
\end_layout

\begin_layout Plain Layout

		margot::foo::stop_monitor();
\end_layout

\begin_layout Plain Layout

		margot::foo::log();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Region Monitor
\end_layout

\begin_layout Standard
Not only function calls can be monitored, but also well-delimited blocks
 of code (i.e., the regions of interest); the block delimitation has to be
 manually performed inside the application code, by applying at the start
 of the block the function call:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

margot_<block_name>_start_roi(knob1_name, knob2_name, ...)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
where all the knobs to monitor are listed as its parameters and <block_name>
 corresponds to the attribute with the same name for the aspect element,
 and at the end of the block the function call:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

margot_<block_name>_end_roi()
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout Standard
Let's stay that we want to monitor a region of code.
 So the user marks it calling the above function pair.
 Without any loss of generality let us assume that the user code looks like
 this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2,columns=fullflexible,frame=single,stringstyle={\color[rgb]{0.627,0.126,0.941}},keywordstyle={\color[rgb]{0,0,1}},identifierstyle={\ttfstyle},commentstyle={\color{gray}\upshape}"
inline false
status open

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

	int knob_one = 10;   
\end_layout

\begin_layout Plain Layout

	int knob_two = 10;
\end_layout

\begin_layout Plain Layout

	margot_bar_start_roi(knob_one, knob_two);
\end_layout

\begin_layout Plain Layout

	// Whatever
\end_layout

\begin_layout Plain Layout

    for (int j = 0; j < inner_loop_size; ++j) {
\end_layout

\begin_layout Plain Layout

    // code, like
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

	// anything 
\end_layout

\begin_layout Plain Layout

    margot_bar_end_roi();
\end_layout

\begin_layout Plain Layout

} // Functional code
\end_layout

\end_inset


\end_layout

\begin_layout Standard
So this time we define a 
\emph on
region-monitor
\emph default
 block telling 
\series bold
MarGotAspect
\series default
 that in this 
\series bold
mARGOt
\series default
 block named 
\emph on
foo 
\emph default
there are 2 
\emph on
software knobs.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=XML,basicstyle={\ttfamily},breaklines=true,tabsize=2,basicstyle={\ttfamily},columns=fullflexible,showstringspaces=false,frame=single,morestring={[s]{&quot;}{&quot;}},morecomment={[s]{?}{?}},morecomment={[s]{!--}{--}},commentstyle={\color{darkgreen}},moredelim={[s][\color{black}]{>}{<}},moredelim={[s][\color{red}]{\ }{=}},stringstyle={\color{blue}},identifierstyle={\color{maroon}}"
inline false
status open

\begin_layout Plain Layout

<margot>
\end_layout

\begin_layout Plain Layout

	<aspect block_name="bar">
\end_layout

\begin_layout Plain Layout

		<region-monitor>
\end_layout

\begin_layout Plain Layout

			<argument sw-knob="yes">
\end_layout

\begin_layout Plain Layout

				<type>int</type>
\end_layout

\begin_layout Plain Layout

				<name>knob_one</name>
\end_layout

\begin_layout Plain Layout

			</argument>
\end_layout

\begin_layout Plain Layout

			<argument sw-knob="yes">
\end_layout

\begin_layout Plain Layout

				<type>int</type>
\end_layout

\begin_layout Plain Layout

				<name>knob_two</name>
\end_layout

\begin_layout Plain Layout

			</argument>
\end_layout

\begin_layout Plain Layout

		</region-monitor>
\end_layout

\begin_layout Plain Layout

	</aspect>
\end_layout

\begin_layout Plain Layout

</margot>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And here is the AspectC++ code that 
\series bold
MarGotAspect
\series default
 generates for us.
 As in 
\emph on
function-monitor
\emph default
 case it performs a check on the values of our software knobs and then starts
 the monitor right before our region-of-interest marker function.
 When it reaches the end of the region-of-interest it stops the monitor
 and logs the results.
 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2,morekeywords={aspect,pointcut,advice,before,after,execution,args,set},columns=fullflexible,frame=single,keywordstyle={\color[rgb]{0,0,1}},commentstyle={\color{gray}\upshape},identifierstyle={\ttfstyle},stringstyle={\color[rgb]{0.627,0.126,0.941}}"
inline false
status open

\begin_layout Plain Layout

aspect barAspect {
\end_layout

\begin_layout Plain Layout

	pointcut bar_start_roi(int knob_one, int knob_two) = execution("void margot_bar
_start_roi()") && args(knob_one, knob_two);
\end_layout

\begin_layout Plain Layout

	pointcut bar_end_roi() = execution("void margot_bar_end_roi()");
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	advice bar_start_roi(knob_one, knob_two) : before(int knob_one, int knob_two)
 {
\end_layout

\begin_layout Plain Layout

		if (margot::bar::update(knob_one, knob_two)) {
\end_layout

\begin_layout Plain Layout

			margot::bar::manager.configuration_applied();
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		margot::bar::start_monitor();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	advice bar_end_roi() : before() {
\end_layout

\begin_layout Plain Layout

		margot::bar::stop_monitor();
\end_layout

\begin_layout Plain Layout

		margot::bar::log();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this case 
\series bold
MarGotAspect
\series default
 generates another file, the C++ code defining the two marker functions:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2,columns=fullflexible,frame=single,stringstyle={\color[rgb]{0.627,0.126,0.941}},keywordstyle={\color[rgb]{0,0,1}},identifierstyle={\ttfstyle},commentstyle={\color{gray}\upshape}"
inline false
status open

\begin_layout Plain Layout

// roiHeaders.h
\end_layout

\begin_layout Plain Layout

void margot_bar_start_roi(int knob_one, int knob_two) { }
\end_layout

\begin_layout Plain Layout

void margot_bar_end_roi() { }
\end_layout

\end_inset


\end_layout

\begin_layout Section
Tuners
\end_layout

\begin_layout Standard
Goal tuners and state tuners corresponds to advice code which allows to
 change at run-time the goal values or the state of the 
\series bold
mARGOt
\series default
 framework, according to some variable (not just a software knob, as already
 automatically possible for the framework).
\end_layout

\begin_layout Standard
Both of them share the concept of rule, which allows associating each particular
 state or goal value to a logical predicate to be verified at run-time.
\end_layout

\begin_layout Subsection
Rule
\end_layout

\begin_layout Standard
Rules are a key aspect for both tuners, as they couple together predicates
 and goal/state values.
\end_layout

\begin_layout Standard
Each 
\emph on
rule
\emph default
 element has indeed an associated 
\emph on
value
\emph default
 element, which corresponds to a possible value for either a state or a
 goal, and a predicate element.
\end_layout

\begin_layout Standard
Predicates can be either simple predicates (
\emph on
predicate
\emph default
) or composite predicates (
\emph on
and
\emph default
, 
\emph on
or
\emph default
, 
\emph on
not
\emph default
 elements).
\end_layout

\begin_layout Standard
Simple predicates are assigned a predicate value (a numerical value, or
 a boolean) and they can be of 
\begin_inset Quotes eld
\end_inset


\emph on
eq
\emph default

\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset


\emph on
neq
\emph default

\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset


\emph on
gt
\emph default

\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset


\emph on
gte
\emph default

\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset


\emph on
lt
\emph default

\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset


\emph on
lte
\emph default

\begin_inset Quotes erd
\end_inset

 types, as reported in the corresponding 
\emph on
type
\emph default
 attribute; the simple predicate will be satisfied when the associate variable,
 i.e., the 
\emph on
control-var
\emph default
 element, will have a value such that the 
\emph on
<control-var> <predicate-type> <predicate-value>
\emph default
 expression is true.
\end_layout

\begin_layout Standard
Composite predicates instead use the 
\emph on
and
\emph default
, 
\emph on
or
\emph default
 and 
\emph on
not
\emph default
 elements to compose (both simple and composite) predicates with the correspondi
ng boolean logic functions.
\end_layout

\begin_layout Subsection
Goal Tuner
\end_layout

\begin_layout Standard
To each goal tuner, a goal previously defined in the 
\series bold
mARGOt
\series default
 configuration files is associated through the 
\emph on
goal-name
\emph default
 element.
\end_layout

\begin_layout Standard
In the context of the goal tuners, the simple predicate element values correspon
d to possible values of this goal, and the value of the goal is updated
 to the value of some rule whose predicate is verified.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout Standard
This time let us say we want to introduce a set of rules according to which
 we set the 
\series bold
mARGOt
\series default
 goal in a block named 
\emph on
foo
\emph default
.
 These rules should be applied when a control variable in our code is assigned
 to some values.
 Let us consider a piece of functional code that performs assignments to
 the control variable 
\emph on
goal_condition
\emph default
.
 Let's assume that we had previously defined in 
\series bold
mARGOt
\series default
 a goal named 
\emph on
my_execution_time_goal
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2,columns=fullflexible,frame=single,stringstyle={\color[rgb]{0.627,0.126,0.941}},keywordstyle={\color[rgb]{0,0,1}},identifierstyle={\ttfstyle},commentstyle={\color{gray}\upshape}"
inline false
status open

\begin_layout Plain Layout

int goal_condition = 1;
\end_layout

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

	// Whatever
\end_layout

\begin_layout Plain Layout

	for (int i = 0; i < N; ++i) {
\end_layout

\begin_layout Plain Layout

		if (goal_condition >= 8) goal_condition = 1; 
\end_layout

\begin_layout Plain Layout

		else goal_condition = goal_condition + 1;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

	// code
\end_layout

\begin_layout Plain Layout

} // Functional code
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To accomplish our requirements we define a 
\emph on
goal-tuner
\emph default
 block telling 
\series bold
MarGotAspect
\series default
 that the control variable is named 
\emph on
goal_condition 
\emph default
and of type 
\emph on
int
\emph default
.
 Then we explicit our set of rules.
 Let us assume that in case 
\emph on
goal_condition = 1 
\emph default
we want our goal set to 
\emph on
80000
\emph default
.
 Again in case 
\emph on
3 < goal_condition < 6 or 7 <= goal_condition <= 8 
\emph default
we want our goal set to 
\emph on
300000.

\emph default
 We can describe all of this in the XML file.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=XML,basicstyle={\ttfamily},breaklines=true,tabsize=2,basicstyle={\ttfamily},columns=fullflexible,showstringspaces=false,frame=single,morestring={[s]{&quot;}{&quot;}},morecomment={[s]{?}{?}},morecomment={[s]{!--}{--}},commentstyle={\color{darkgreen}},moredelim={[s][\color{black}]{>}{<}},moredelim={[s][\color{red}]{\ }{=}},stringstyle={\color{blue}},identifierstyle={\color{maroon}}"
inline false
status open

\begin_layout Plain Layout

<margot>
\end_layout

\begin_layout Plain Layout

	<aspect block_name="foo">
\end_layout

\begin_layout Plain Layout

		<goal-tuner>
\end_layout

\begin_layout Plain Layout

			<control-var>
\end_layout

\begin_layout Plain Layout

				<type>int</type>
\end_layout

\begin_layout Plain Layout

				<name>goal_condition</name>
\end_layout

\begin_layout Plain Layout

			</control-var>
\end_layout

\begin_layout Plain Layout

			<goal-name>my_execution_time_goal</goal-name>
\end_layout

\begin_layout Plain Layout

			<rule>
\end_layout

\begin_layout Plain Layout

				<predicate type="eq">1</predicate>
\end_layout

\begin_layout Plain Layout

				<value>80000</value>
\end_layout

\begin_layout Plain Layout

			</rule>
\end_layout

\begin_layout Plain Layout

			<rule>
\end_layout

\begin_layout Plain Layout

				<predicate type="eq">2</predicate>
\end_layout

\begin_layout Plain Layout

				<value>200000</value>
\end_layout

\begin_layout Plain Layout

			</rule>
\end_layout

\begin_layout Plain Layout

			<rule>
\end_layout

\begin_layout Plain Layout

				<not>
\end_layout

\begin_layout Plain Layout

					<predicate type="neq">3</predicate>
\end_layout

\begin_layout Plain Layout

				</not>
\end_layout

\begin_layout Plain Layout

				<value>50000</value>
\end_layout

\begin_layout Plain Layout

			</rule>
\end_layout

\begin_layout Plain Layout

			<rule>
\end_layout

\begin_layout Plain Layout

				<or>
\end_layout

\begin_layout Plain Layout

					<and>
\end_layout

\begin_layout Plain Layout

						<predicate type="gt">3</predicate>
\end_layout

\begin_layout Plain Layout

						<predicate type="lt">6</predicate>
\end_layout

\begin_layout Plain Layout

					</and>
\end_layout

\begin_layout Plain Layout

					<and>
\end_layout

\begin_layout Plain Layout

						<predicate type="gte">7</predicate>
\end_layout

\begin_layout Plain Layout

						<predicate type="lte">8</predicate>
\end_layout

\begin_layout Plain Layout

					</and>
\end_layout

\begin_layout Plain Layout

				</or>
\end_layout

\begin_layout Plain Layout

				<value>300000</value>
\end_layout

\begin_layout Plain Layout

			</rule>
\end_layout

\begin_layout Plain Layout

		</goal-tuner>
\end_layout

\begin_layout Plain Layout

	</aspect>
\end_layout

\begin_layout Plain Layout

</margot>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And here is the AspectC++ code that 
\series bold
MarGotAspect
\series default
 generates for us.
 Quite short this time.
 In this case we execute a function named 
\emph on
tune_my_execution_time_goal 
\emph default
passing the new value of 
\emph on
goal_condition
\emph default
 as argument.
 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2,morekeywords={aspect,pointcut,advice,before,after,execution,args,set},columns=fullflexible,frame=single,keywordstyle={\color[rgb]{0,0,1}},commentstyle={\color{gray}\upshape},identifierstyle={\ttfstyle},stringstyle={\color[rgb]{0.627,0.126,0.941}}"
inline false
status open

\begin_layout Plain Layout

aspect fooAspect {
\end_layout

\begin_layout Plain Layout

	pointcut goal_condition_set() = set("int ...::goal_condition");
\end_layout

\begin_layout Plain Layout

	advice goal_condition_set() : after () {
\end_layout

\begin_layout Plain Layout

		tune_my_execution_time_goal(*tjp->entity());
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
tune_my_execution_time_goal 
\emph default
is a function generated as well by 
\series bold
MarGotAspect
\series default
 that implements the check on the new value of 
\emph on
goal_condition
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2,columns=fullflexible,frame=single,stringstyle={\color[rgb]{0.627,0.126,0.941}},keywordstyle={\color[rgb]{0,0,1}},identifierstyle={\ttfstyle},commentstyle={\color{gray}\upshape}"
inline false
status open

\begin_layout Plain Layout

// margotAspect.h
\end_layout

\begin_layout Plain Layout

#include <margot.hpp>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void tune_my_execution_time_goal(int goal_condition) {
\end_layout

\begin_layout Plain Layout

	if (goal_condition == 1) {
\end_layout

\begin_layout Plain Layout

		margot::foo::goal::my_execution_time_goal.set(80000);
\end_layout

\begin_layout Plain Layout

	} else if (goal_condition == 2) {
\end_layout

\begin_layout Plain Layout

		margot::foo::goal::my_execution_time_goal.set(200000);
\end_layout

\begin_layout Plain Layout

	} else if (!(goal_condition != 3)) {
\end_layout

\begin_layout Plain Layout

		margot::foo::goal::my_execution_time_goal.set(50000);
\end_layout

\begin_layout Plain Layout

	} else if (((goal_condition > 3 && goal_condition < 6) || (goal_condition
 >= 7 && goal_condition <= 8))) {
\end_layout

\begin_layout Plain Layout

		margot::foo::goal::my_execution_time_goal.set(300000);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
State Tuner
\end_layout

\begin_layout Standard
In the context of the state tuners, the simple predicate element values
 correspond to the names of states as defined in the 
\series bold
mARGOt
\series default
 configuration files, and the state of the framework is updated to the value
 of some rule whose predicate is verified.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout Standard
This case is similar to the previous one.
 We still need a set of rules according to which we set the 
\series bold
mARGOt
\series default
 
\series bold
state
\series default
 in a block named 
\emph on
foo
\emph default
.
 These rules should be applied when a control variable in our code is assigned
 to some values.
 Let us consider a piece of functional code that performs assignments to
 the control variable 
\emph on
state_condition
\emph default
.
 Let's assume that we had previously defined in 
\series bold
mARGOt
\series default
 two states named 
\emph on
my_optimization
\emph default
 and 
\emph on
my_optimization_two
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2,columns=fullflexible,frame=single,stringstyle={\color[rgb]{0.627,0.126,0.941}},keywordstyle={\color[rgb]{0,0,1}},identifierstyle={\ttfstyle},commentstyle={\color{gray}\upshape}"
inline false
status open

\begin_layout Plain Layout

bool state_condition = true;
\end_layout

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

	// Whatever
\end_layout

\begin_layout Plain Layout

	for (int i = 0; i < N; ++i) {
\end_layout

\begin_layout Plain Layout

		if (i % 2 == 0) state_condition = false; 
\end_layout

\begin_layout Plain Layout

		else state_condition = true;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

	// code
\end_layout

\begin_layout Plain Layout

} // Functional code
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To accomplish our requirements we define a 
\emph on
state-tuner
\emph default
 block telling 
\series bold
MarGotAspect
\series default
 that the control variable is named 
\emph on
state_condition 
\emph default
and of type bool.
 Then we explicit our set of rules.
 This time we case the boolean value of 
\emph on
state_condition
\emph default
.
 If it's 
\emph on
true
\emph default
 we want 
\emph on
my_optimization
\emph default
 set as 
\series bold
state
\series default
 otherwise we want 
\emph on
my_optimization_two.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=XML,basicstyle={\ttfamily},breaklines=true,tabsize=2,basicstyle={\ttfamily},columns=fullflexible,showstringspaces=false,frame=single,morestring={[s]{&quot;}{&quot;}},morecomment={[s]{?}{?}},morecomment={[s]{!--}{--}},commentstyle={\color{darkgreen}},moredelim={[s][\color{black}]{>}{<}},moredelim={[s][\color{red}]{\ }{=}},stringstyle={\color{blue}},identifierstyle={\color{maroon}}"
inline false
status open

\begin_layout Plain Layout

<margot>
\end_layout

\begin_layout Plain Layout

	<aspect block_name="foo">
\end_layout

\begin_layout Plain Layout

		<state-tuner>
\end_layout

\begin_layout Plain Layout

			<control-var>
\end_layout

\begin_layout Plain Layout

				<type>bool</type>
\end_layout

\begin_layout Plain Layout

				<name>state_condition</name>
\end_layout

\begin_layout Plain Layout

			</control-var>
\end_layout

\begin_layout Plain Layout

			<rule>
\end_layout

\begin_layout Plain Layout

				<predicate type="eq">true</predicate>
\end_layout

\begin_layout Plain Layout

				<value>my_optimization</value>
\end_layout

\begin_layout Plain Layout

			</rule>
\end_layout

\begin_layout Plain Layout

			<rule>
\end_layout

\begin_layout Plain Layout

				<predicate type="eq">false</predicate>
\end_layout

\begin_layout Plain Layout

				<value>my_optimization_two</value>
\end_layout

\begin_layout Plain Layout

			</rule>
\end_layout

\begin_layout Plain Layout

		</state-tuner>
\end_layout

\begin_layout Plain Layout

	</aspect>
\end_layout

\begin_layout Plain Layout

</margot>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The AspectC++ code that 
\series bold
MarGotAspect
\series default
 generates for us is basically the same of 
\emph on
goal-tuner
\emph default
.
 In this case we execute a function named 
\emph on
tune_foo_state 
\emph default
passing the new value of 
\emph on
state_condition
\emph default
 as argument.
 
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2,morekeywords={aspect,pointcut,advice,before,after,execution,args,set},columns=fullflexible,frame=single,keywordstyle={\color[rgb]{0,0,1}},commentstyle={\color{gray}\upshape},identifierstyle={\ttfstyle},stringstyle={\color[rgb]{0.627,0.126,0.941}}"
inline false
status open

\begin_layout Plain Layout

aspect fooAspect {
\end_layout

\begin_layout Plain Layout

	pointcut state_condition_set() = set("bool ...::state_condition");
\end_layout

\begin_layout Plain Layout

	advice state_condition_set() : after () {
\end_layout

\begin_layout Plain Layout

		tune_foo_state(*tjp->entity());
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
tune_foo_state 
\emph default
is a function generated as well by 
\series bold
MarGotAspect
\series default
 that implements the check on the new value of 
\emph on
state_condition
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily},breaklines=true,showstringspaces=false,tabsize=2,columns=fullflexible,frame=single,stringstyle={\color[rgb]{0.627,0.126,0.941}},keywordstyle={\color[rgb]{0,0,1}},identifierstyle={\ttfstyle},commentstyle={\color{gray}\upshape}"
inline false
status open

\begin_layout Plain Layout

// margotAspect.h
\end_layout

\begin_layout Plain Layout

#include <margot.hpp>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void tune_foo_state(bool state_condition) {
\end_layout

\begin_layout Plain Layout

	if (state_condition == true) {
\end_layout

\begin_layout Plain Layout

		margot::foo::manager.change_active_state("my_optimization");
\end_layout

\begin_layout Plain Layout

	} else if (state_condition == false) {
\end_layout

\begin_layout Plain Layout

		margot::foo::manager.change_active_state("my_optimization_two");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
